name: Build Armbian test 
  
on:  
  workflow_dispatch:  
    inputs:  
      BOARD:  
        description: 'Board type'  
        required: true 
        default: 'tpm312'
        type: choice
        options:
          - fine3399
          - r08
          - rock960
          - tpm312
          - tb-ls3399
          - xiaobao-nas
          - zysj
      BRANCH:  
        description: 'Armbian branch'  
        default: 'current'  
        required: false 
        type: choice 
        options:
          - current
          - edge
      RELEASE:  
        description: 'Release name' 
        default: 'bookworm'
        required: true  
        type: choice
        options:
          - jammy
          - noble
          - bullseye
          - bookworm
      Version:
        description: 'Armbian Version'
        default: 'main'
        required: false 
        type: choice
        options: 
          - main 
          - v24.08
      BUILD_MINIMAL:  
        description: 'Build minimal system'  
        default: 'no'  
        required: false  
        type: choice
        options:
          - no
          - yes
      BUILD_DESKTOP:  
        description: 'Build desktop environment'  
        default: 'no'  
        required: false  
        type: choice
        options:
          - no
      KERNEL_CONFIGURE:  
        description: 'Configure kernel'  
        default: 'no'  
        required: false  
        type: choice 
        options:
          - no
      COMPRESS_OUTPUTIMAGE:  
        description: 'Compress output image'  
        default: 'sha,xz'  
        required: false  
        type: string  
      BOOT_LOGO:  
        description: 'Include boot logo'  
        default: 'yes'  
        required: false  
        type: choice 
        options:
          - yes
          - no
  
jobs:  
  build-armbian:  
    runs-on: ubuntu-latest  
    steps:  
      - name: Checkout  
        uses: actions/checkout@v3    
        
      - name: Download source code
        run: |
          df -hT ${PWD}
          git clone -q --single-branch --depth=1 --branch=${{ github.event.inputs.Version }} https://github.com/armbian/build.git build 
          ln -sf ${{ github.workspace }}/build ${{ github.workspace }}/build
          
          # 复制 config 和 userpatches 目录文件    
          cp -rf ${{ github.workspace }}/addboard/config/boards/* ${{ github.workspace }}/build/config/boards
          mkdir -p "${{ github.workspace }}/build/userpatches"
          cp -rf ${{ github.workspace }}/addboard/userpatches/* ${{ github.workspace }}/build/userpatches
  
      - name: Compile Armbian [ ${{ inputs.BOARD }} ${{ inputs.RELEASE }} ] 
        run: |  
          cd ${GITHUB_WORKSPACE}/build/ 
          ./compile.sh BOARD=${{ inputs.BOARD }} RELEASE=${{ inputs.RELEASE }} BRANCH=${{ inputs.BRANCH }} BUILD_MINIMAL=${{ inputs.BUILD_MINIMAL }} \
                           BUILD_DESKTOP=${{ inputs.BUILD_DESKTOP }} KERNEL_CONFIGURE=${{ inputs.KERNEL_CONFIGURE }} \
                           COMPRESS_OUTPUTIMAGE=${{ inputs.COMPRESS_OUTPUTIMAGE }} BOOT_LOGO=${{ inputs.BOOT_LOGO }}
          
      - name: Set current year and month  
        run: |  
          echo "CURRENT_YEAR_MONTH=$(date +'%Y%m')" >> $GITHUB_ENV  

      - name: Prepare Release Metadata
        run: |  
          # 提取版本号
          latest_image=$(ls ${{ github.workspace }}/build/output/images/Armbian-unofficial_*.img.xz | grep -oE 'Armbian-unofficial_[0-9.]+_.*' | sort -V | tail -n 1)    
          version=$(echo "$latest_image" | cut -d'_' -f2)   

          # 提取板子型号
          board_model=$(echo "$latest_image" | cut -d'_' -f3)
      
          # 将版本号设置为环境变量  
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "BOARD_MODEL=$board_model" >> $GITHUB_ENV 
          # echo "KERNEL_VERSION=$kernel_version" >> $GITHUB_ENV
         
      - name: Prepare Kernel Packages  
        run: |  
          cd "${GITHUB_WORKSPACE}/build/output/packages-hashed/"
          
          echo "Found files in directory:" 
          # 使用find命令查找匹配的文件  
          # 我们只关心以 'kernel-rockchip64-' 开头并以 '_arm64.tar' 结尾的文件  
          for file in kernel-rockchip64-*_arm64.tar; do  
          # 检查文件是否确实存在  
            if [ -f "$file" ]; then  
                # 提取内核版本号
                kernel_version=$(echo "$file" | awk -F'_' '{  
                  prefix_found = 0;  
                  for(i=1; i<=NF-2; i++) { # 遍历到倒数第三个字段，因为我们需要检查的是版本号前的那个字段  
                    if($i ~ /^kernel-rockchip64-(current|edge|legacy|vendor)$/) {  
                    prefix_found = 1;  
                    # 如果下一个字段是数字加点的版本号，则打印它并退出  
                    if (i+1 <= NF-1 && $(i+1) ~ /^[0-9]+\.[0-9]+\.[0-9]+$/) {  
                      print $(i+1);  
                      exit;  
                      }  
                    }  
                  }  
                  if (!prefix_found) {  
                    print "Prefix not found";  
                  } else {  
                    print "Version not found";  
                  }  
                }') 
                
                # 验证kernel_version是否已正确设置
                if [ -z "$kernel_version" ]; then  
                    echo "Kernel version not found in filename: $file"  
                    exit 1  
                fi
                echo "KERNEL_VERSION=$kernel_version" >> $GITHUB_ENV
                
                # 重命名文件  
                mv "$file" "kernel_rockchip64_${kernel_version}_${{ env.BOARD_MODEL }}.tar"  
          
                # 移动重命名的文件到目标位置  
                mv "kernel_rockchip64_${kernel_version}_${{ env.BOARD_MODEL }}.tar" "${GITHUB_WORKSPACE}/"  
          
                # 可选：打印一条消息以确认文件已被移动  
                echo "Moved $file to ${GITHUB_WORKSPACE}/"  
            else  
                echo "File $file not found."  
            fi  
          done 
        
      - name: Upload Kernel Packages to Release  
        if: success()  
        uses: ncipollo/release-action@main  
        with:  
          tag: "Armbian_Kernel"
          name: "Armbian_Kernel"
          artifacts: "${{ github.workspace }}/kernel_rockchip64_${KERNEL_VERSION}_${{ env.BOARD_MODEL }}.tar"  
          allowUpdates: true  
          removeArtifacts: false  
          replacesArtifacts: true  
          token: ${{ secrets.MY_TOKEN }}  
          body: |  
            ### Armbian Kernel Packages  
            - The kernel can be used to compile Armbian
            - Usage method: After unzipping, install the deb packages in order
          draft: false  
          prerelease: false  
        
      - name: Upload image to Release  
        if: success() 
        uses: ncipollo/release-action@main
        with:  
          tag: "Armbian_${{ github.event.inputs.Version }}_${{ github.event.inputs.RELEASE }}_${{ env.CURRENT_YEAR_MONTH }}"  
          name: "Armbian_${{ github.event.inputs.Version }}_${{ github.event.inputs.RELEASE }}_${{ env.CURRENT_YEAR_MONTH }}"  
          artifacts: "${{ github.workspace }}/build/output/images/*"  
          allowUpdates: true 
          removeArtifacts: false 
          replacesArtifacts: true 
          token: ${{ secrets.MY_TOKEN }}  
          body: |  
            ### Armbian Image Information  
            - Release: ${{ github.event.inputs.RELEASE }}    
            - Version: ${{ env.VERSION }}  
            ### Armbian Image Verification  
            - sha256sum   
          draft: false  
          prerelease: false  
