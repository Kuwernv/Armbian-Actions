name: Build Armbian  
  
on:  
  workflow_dispatch:  
    inputs:  
      BOARD:  
        description: 'Board type'  
        required: true 
        default: 'tpm312'
        type: choice
        options:
          - fine3399
          - r08
          - rock960
          - tpm312
          - tb-ls3399
          - xiaobao-nas
          - zysj
      BRANCH:  
        description: 'Armbian branch'  
        default: 'current'  
        required: false 
        type: choice 
        options:
          - current
          - edge
      RELEASE:  
        description: 'Release name' 
        default: 'bookworm'
        required: true  
        type: choice
        options:
          - jammy
          - noble
          - bullseye
          - bookworm
      Version:
        description: 'Armbian Version'
        default: 'main'
        required: false 
        type: choice
        options: 
          - main 
          - v24.08
      BUILD_MINIMAL:  
        description: 'Build minimal system'  
        default: 'no'  
        required: false  
        type: choice
        options:
          - no
          - yes
      BUILD_DESKTOP:  
        description: 'Build desktop environment'  
        default: 'no'  
        required: false  
        type: choice
        options:
          - no
      KERNEL_CONFIGURE:  
        description: 'Configure kernel'  
        default: 'no'  
        required: false  
        type: choice 
        options:
          - no
      COMPRESS_OUTPUTIMAGE:  
        description: 'Compress output image'  
        default: 'sha,xz'  
        required: false  
        type: string  
      BOOT_LOGO:  
        description: 'Include boot logo'  
        default: 'yes'  
        required: false  
        type: choice 
        options:
          - yes
          - no
  
jobs:  
  build-armbian:  
    runs-on: ubuntu-latest  
    steps:  
      - name: Checkout  
        uses: actions/checkout@v3    
        
      - name: Download source code
        run: |
          df -hT ${PWD}
          git clone -q --single-branch --depth=1 --branch=${{ github.event.inputs.Version }} https://github.com/armbian/build.git build 
          ln -sf ${{ github.workspace }}/build ${{ github.workspace }}/build
          
          # 复制 config 和 userpatches 目录文件    
          cp -rf ${{ github.workspace }}/addboard/config/boards/* ${{ github.workspace }}/build/config/boards
          mkdir -p "${{ github.workspace }}/build/userpatches"
          cp -rf ${{ github.workspace }}/addboard/userpatches/* ${{ github.workspace }}/build/userpatches
  
      - name: Compile Armbian [ ${{ inputs.BOARD }} ${{ inputs.RELEASE }} ] 
        run: |  
          cd ${GITHUB_WORKSPACE}/build/ 
          ./compile.sh BOARD=${{ inputs.BOARD }} RELEASE=${{ inputs.RELEASE }} BRANCH=${{ inputs.BRANCH }} BUILD_MINIMAL=${{ inputs.BUILD_MINIMAL }} \
                           BUILD_DESKTOP=${{ inputs.BUILD_DESKTOP }} KERNEL_CONFIGURE=${{ inputs.KERNEL_CONFIGURE }} \
                           COMPRESS_OUTPUTIMAGE=${{ inputs.COMPRESS_OUTPUTIMAGE }} BOOT_LOGO=${{ inputs.BOOT_LOGO }}
          
      - name: Set current year and month  
        run: |  
          echo "CURRENT_YEAR_MONTH=$(date +'%Y%m')" >> $GITHUB_ENV  

      - name: Prepare Release Metadata
        run: |   
          # 提取包含最新版本的镜像文件名  
          latest_image=$(ls "${{ github.workspace }}/build/output/images/Armbian-unofficial_*.img.xz" | sort -V | tail -n 1)  
      
          # 提取armbian版本号（第二个字段）  
          armbian_version=$(echo "$latest_image" | cut -d'_' -f2)  
      
          # 提取内核版本号（最后一个字段之前的第二个字段，假设字段由'_'分隔）    
          kernel_version=$(echo "$latest_image" | awk -F'_' '{for(i=1;i<=NF;i++) if($i ~ /^[0-9]+\.[0-9]+\.[0-9]+$/) version=$i; if(i==NF) print version; exit}')  
      
          # 将版本号设置为环境变量  
          echo "ARMBIAN_VERSION=$armbian_version" >> $GITHUB_ENV  
          echo "KERNEL_VERSION=$kernel_version" >> $GITHUB_ENV
         
      - name: Prepare Kernel Packages  
        run: |  
          cd ${GITHUB_WORKSPACE}/build/output/debs/
          # 检查是否存在需要打包的deb文件  
          if [ ! -f "linux-dtb-*.deb" ] || [ ! -f "linux-headers-*.deb" ] || [ ! -f "linux-image-*.deb" ]; then  
            echo "One or more required .deb files were not found."  
            exit 1  
          fi 
          
          # 打包kernel
          tar -czvf armbian_kernel_${{ env.KERNEL_VERSION }}_${{ inputs.BOARD }}.tar.gz linux-dtb-*.deb linux-headers-*.deb linux-image-*.deb  
          
          # 移动打包后的文件
          mv armbian_kernel_${{ env.KERNEL_VERSION }}_${{ inputs.BOARD }}.tar.gz ${GITHUB_WORKSPACE}/
        
      - name: Upload Kernel Packages to Release  
        if: success()  
        uses: ncipollo/release-action@main  
        with:  
          tag: "armbian_kernel_${{ github.event.inputs.BOARD }}"  
          name: "armbian_kernel_${{ github.event.inputs.BOARD }}" 
          artifacts: "${{ github.workspace }}/armbian_kernel_${{ env.KERNEL_VERSION }}_${{ inputs.BOARD }}.tar.gz"  
          allowUpdates: true  
          removeArtifacts: false  
          replacesArtifacts: true  
          token: ${{ secrets.MY_TOKEN }}  
          body: |  
            ### Armbian Kernel Packages  
            - The kernel can be used to compile Armbian
            - Usage method: After unzipping, install the deb packages in order
          draft: false  
          prerelease: false 
          
      - name: Upload image to Release  
        if: success() 
        uses: ncipollo/release-action@main
        with:  
          tag: "Armbian_${{ github.event.inputs.Version }}_${{ github.event.inputs.RELEASE }}_${{ env.CURRENT_YEAR_MONTH }}"  
          name: "Armbian_${{ github.event.inputs.Version }}_${{ github.event.inputs.RELEASE }}_${{ env.CURRENT_YEAR_MONTH }}"  
          artifacts: "${{ github.workspace }}/build/output/images/*"  
          allowUpdates: true 
          removeArtifacts: false 
          replacesArtifacts: true 
          token: ${{ secrets.MY_TOKEN }}  
          body: |  
            ### Armbian Image Information  
            - Release: ${{ github.event.inputs.RELEASE }}    
            - Version: ${{ env.ARMBIAN_VERSION }}  
            ### Armbian Image Verification  
            - sha256sum   
          draft: false  
          prerelease: false  
